name: Build and push Postgres Management image

on:
  push:
    branches: [ manual-deploy ]
    # push:
    #   branches: [ master ]
    paths:
      - 'postgres-management/**'

  # Allows manual trigger
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: zilkroad-private
  CONTAINER_NAME: postgres-management 
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      working-directory: ./postgres-management
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY/$CONTAINER_NAME:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY/$CONTAINER_NAME:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY/$CONTAINER_NAME:$IMAGE_TAG"
